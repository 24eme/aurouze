<?php

namespace AppBundle\Repository;

use Doctrine\ODM\MongoDB\DocumentRepository;
use AppBundle\Document\Attachement;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\ODM\MongoDB\LockMode;

/**
 * AttachementRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AttachementRepository extends BaseRepository {

    public function findForAttachements($id, $lockMode = LockMode::NONE, $lockVersion = null){
        $doc = parent::find($id, $lockMode, $lockVersion);
        $this->getDocumentManager()->getUnitOfWork()->clear("AppBundle\Document\Attachement"); //sinon le document attachement est modifié
        return $doc;
    }

    public function findLast() {

        return $this->createQueryBuilder()
             ->select('_id', 'updatedAt', 'imageName', 'titre', 'originalName', 'etablissement', 'societe', 'visibleTechnicien', 'ext','visibleClient')
             ->field('etablissement')->prime(true)
             ->field('societe')->prime(true)
             ->limit(10)
             ->sort(array('_id' => -1))
             ->getQuery()
             ->execute();
    }

    public function findBySociete($societe)
	{
        $attachments = array();
        foreach($this->createQueryBuilder()->exclude('base64')
                ->field('societe')->equals($societe)
                ->getQuery()->execute() as $attachement)
        {
            $attachments[$attachement->getId()] = $attachement;
        }

        uasort($attachments,array("AppBundle\Document\Attachement", "cmpUpdateAt"));
        $this->getDocumentManager()->getUnitOfWork()->clear("AppBundle\Document\Attachement");
        // $this->getDocumentManager()->clear(); //sinon le document attachement est modifié
        return $attachments;
    }

    public function findByEtablissement($etablissement)
	{
        $attachments = [];
        foreach ($this->createQueryBuilder()->exclude('base64')
                     ->field('etablissement')->equals($etablissement)
                     ->getQuery()->execute() as $attachment)
        {
            $attachments[$attachment->getId()] = $attachment;
        }

        uasort($attachments, array("AppBundle\Document\Attachement", "cmpUpdateAt"));
        $this->getDocumentManager()->getUnitOfWork()->clear("AppBundle\Document\Attachement");
        return $attachments;
    }

    public function findByPassageAndVisibleClient($passage)
    {
        $attachments = array();
        $query = $this->createQueryBuilder()->select('_id', 'updatedAt', 'imageName', 'titre', 'originalName', 'etablissement', 'societe', 'visibleTechnicien', 'ext','visibleClient')
                                            ->field('etablissement')->equals($passage->getEtablissement())
                                            ->field('visibleClient')->equals(true);
        if($passage->getDateDebut()){
            $query = $query->field('updatedAt')->range(\DateTimeImmutable::createFromMutable($passage->getDateDebut())->modify('today'), \DateTimeImmutable::createFromMutable($passage->getDateDebut())->modify('tomorrow'));
        }

        foreach( $query->getQuery()->execute() as $attachement) {
            $attachments[$attachement->getId()] = $attachement;
        }

        uasort($attachments,array("AppBundle\Document\Attachement", "cmpUpdateAt"));

        $this->getDocumentManager()->getUnitOfWork()->clear("AppBundle\Document\Attachement");//sinon le document attachement est modifié
        return $attachments;
    }

    public function getSocieteAndEtablissements($societe, $count = false)
	{
        $facets = [];
        $docs = [];

        $qb = $this->createQueryBuilder();

        if ($count) {
            $facets[$societe->getId()] = 0;
            foreach ($this->findBySociete($societe) as $attachement) {
                $facets[$societe->getId()]++;
            }
        } else {
            $docs = $this->findBySociete($societe);
        }

        $etablissements = $societe->getEtablissements()->toArray();
        $attachements = $qb->exclude('base64')->field('etablissement')->in(array_map(function ($e) { if ($e) return $e->getId(); }, $etablissements))->prime(true)
                           ->getQuery()->execute();

        foreach ($attachements as $attachement) {
            if ($count && array_key_exists($attachement->getEtablissement()->getId(), $facets) === false) {
                $facets[$attachement->getEtablissement()->getId()] = 0;
            }

            if ($count) {
                $facets[$attachement->getEtablissement()->getId()]++;
            } else {
                $docs[$attachement->getId()] = $attachement;
            }
        }

        if ($count) {
            $facets['total'] = array_sum($facets);
            return $facets;
        }

        return $docs;
	}


}
