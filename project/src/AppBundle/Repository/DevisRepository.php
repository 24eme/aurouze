<?php

namespace AppBundle\Repository;

use Doctrine\ODM\MongoDB\DocumentRepository;
use AppBundle\Tool\RechercheTool;
use AppBundle\Document\Societe;
use MongoDate as MongoDate;
use AppBundle\Manager\EtablissementManager;
use AppBundle\Manager\PassageManager;

/**
 * DevisRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class DevisRepository extends DocumentRepository {


  public function findAllDevisForTechnicien(\DateTime $date, $technicien = null)
  {
    $mongoStartDate = new MongoDate(strtotime($date->format("Y-m-d") . " 00:00:00"));
    $mongoEndDate = new MongoDate(strtotime($date->format("Y-m-d") . " 23:59:59"));
    $queryBuilder = $this->createQueryBuilder('Passage');
    $query = $queryBuilder->field('dateFin')->notEqual(null)
            ->field('dateDebut')->gte($mongoStartDate)
            ->field('dateDebut')->lte($mongoEndDate);
    if($technicien){
        $queryBuilder->field('techniciens')->equals($technicien->getId());
    }
    $queryBuilder->sort('dateDebut', 'asc');
    $query = $queryBuilder->getQuery();

    return $query->execute();
  }

  public function findBySociete(Societe $societe, $withCanceled = false)
  {
    $queryBuilder = $this->createQueryBuilder('Devis');
    $queryBuilder->field('societe')->equals($societe->getId());

    if ($withCanceled === false) {
        $queryBuilder->field('statut')->notEqual(PassageManager::STATUT_ANNULE);
    }

    return $queryBuilder->getQuery()->execute();
  }

  public function findToPlan($secteur = EtablissementManager::SECTEUR_PARIS, \DateTime $dateDebut = null, \DateTime $dateFin) {
      $date = new \DateTime();
      $mongoEndDate = new MongoDate(strtotime($dateFin->format('Y-m-d')));

      $q = $this->createQueryBuilder();
      $q->field('statut')->equals(PassageManager::STATUT_A_PLANIFIER)
              ->field('datePrevision')->lte($mongoEndDate);

      if($dateDebut){
        $mongoStartDate = new MongoDate(strtotime($dateDebut->format('Y-m-d')));
        $q->field('datePrevision')->gte($mongoStartDate);

      }

      $regex = $this->getRegexForSeineEtMarne();
      if ($secteur == EtablissementManager::SECTEUR_PARIS) {
         $q->addAnd($q->expr()->field('etablissementInfos.adresse.codePostal')->operator('$not', new \MongoRegex($regex)));
      } elseif($secteur == EtablissementManager::SECTEUR_SEINE_ET_MARNE) {
         $q->addAnd($q->expr()->field('etablissementInfos.adresse.codePostal')->equals(new \MongoRegex($regex)));
      }
      $query = $q->sort('etablissementInfos.adresse.codePostal', 'asc')->getQuery();

      return $query->execute();
  }

  public function findByQuery($q)
  {
      $q = str_replace(",", "", $q);
      $q = "\"".str_replace(" ", "\" \"", $q)."\"";
      $resultSet = array();
      $itemResultSet = $this->getDocumentManager()->getDocumentDatabase('AppBundle:Devis')->command([
          'find' => 'Devis',
          'filter' => ['$text' => ['$search' => $q]],
          'projection' => ['score' => [ '$meta' => "textScore" ]],
          'sort' => ['score' => [ '$meta' => "textScore" ]],
          'limit' => 100

      ]);
      if (isset($itemResultSet['cursor']) && isset($itemResultSet['cursor']['firstBatch'])) {
          foreach ($itemResultSet['cursor']['firstBatch'] as $itemResult) {
              $resultSet[] = array("doc" => $this->uow->getOrCreateDocument('\AppBundle\Document\Devis', $itemResult), "score" => $itemResult['score']);
          }
      }
      return $resultSet;
  }

  private function getRegexForSeineEtMarne(){
    $dpts = EtablissementManager::$secteurs_departements[EtablissementManager::SECTEUR_SEINE_ET_MARNE];
    $regex = '';
    $dptReg = '';
    foreach ($dpts as $i => $dpt) {
        $dptReg .= $dpt;
        if ($i < count($dpts) - 1) {
            $dptReg .= '|';
        }
    }
    $regex .= '/^(' . $dptReg . ')/i';
    return $regex;
  }
}
