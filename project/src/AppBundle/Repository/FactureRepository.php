<?php

namespace AppBundle\Repository;

use Doctrine\ODM\MongoDB\DocumentRepository;
use AppBundle\Tool\RechercheTool;
use AppBundle\Document\societe;
use AppBundle\Manager\FactureManager;
use AppBundle\Manager\EtablissementManager;
use MongoDate as MongoDate;

/**
 * FactureRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class FactureRepository extends BaseRepository {

    public function findAllByContrat($contrat) {

        return $this->createQueryBuilder()
                        ->field('lignes.origineDocument.$id')->equals($contrat->getId())
                        ->getQuery()
                        ->execute();
    }

    public function retrieveAll()
    {
      $qb = $this->createQueryBuilder();
      $qb->hydrate(false);
      $query = $qb->getQuery();
      return iterator_to_array($query->execute());
    }

    public function findByTerms($queryString, $filter = false, $withCloture = false) {
        $terms = explode(" ", trim(preg_replace("/[ ]+/", " ", $queryString)));
        $results = null;
        foreach ($terms as $term) {
            if (strlen($term) < 2) {
                continue;
            }
            $q = $this->createQueryBuilder();
			if (!$withCloture) {
            	$q->field('cloture')->equals(false);
			}
            $q->field('numeroFacture')->notEqual(null);
            if (preg_match('/^[0-9]+\.[0-9]+$/', $term)) {
                $nbInf = $term - 0.0001;
                $nbSup = $term + 0.0001;
                $q->addOr($q->expr()->field('montantTTC')->lt($nbSup)->gt($nbInf))
                  ->addOr($q->expr()->field('montantAPayer')->lt($nbSup)->gt($nbInf));
            } else {
                $q->addOr($q->expr()->field('destinataire.nom')->equals(new \MongoRegex('/.*' . RechercheTool::getCorrespondances($term) . '.*/i')))
                        ->addOr($q->expr()->field('numeroFacture')->equals(new \MongoRegex('/.*' . $term . '.*/i')));
            }
            if($filter && !$withCloture){
                $q->field('cloture')->notEqual(1);
            }
            $factures = $q->limit(1000)->getQuery()->execute();

            $currentResults = array();
            foreach ($factures as $facture) {
                $currentResults[$facture->getId()] = $facture->__toString();
            }

            if (!is_null($results)) {
                $results = array_intersect_assoc($results, $currentResults);
            } else {
                $results = $currentResults;
            }
        }

        return is_null($results) ? array() : $results;
    }

    public function exportOneMonthByDate(\DateTime $dateDebut,\DateTime $dateFin) {

        $q = $this->createQueryBuilder();

        $q->field('dateFacturation')->gte($dateDebut)->lte($dateFin)->sort('dateFacturation', 'asc');
        $q->addAnd($q->expr()->field('numeroFacture')->notEqual(null));
        $query = $q->getQuery();

        return $query->execute();
    }

    public function exportByPrelevements($clients) {
    	$q = $this->createQueryBuilder();
    	$q->addAnd($q->expr()->field('societe')->in($clients));
    	$q->addAnd($q->expr()->field('cloture')->equals(false));
        $q->addAnd($q->expr()->field('montantHT')->gt(0.0));
	$q->addAnd($q->expr()->field('sepa.actif')->equals(true));
        $q->addAnd($q->expr()->field('avoir')->equals(null));
        $q->addAnd($q->expr()->field('inPrelevement')->equals(null));
        $q->addAnd($q->expr()->field('numeroFacture')->notEqual(null));

    	$query = $q->getQuery();
    	return $query->execute();
    }

    public function exportBySocieteAndDate($societe, \DateTime $dateDebut,\DateTime $dateFin) {

        $q = $this->createQueryBuilder();
        $q->field('societe')->equals($societe->getId());
        $q->field('dateFacturation')->gte($dateDebut)->lte($dateFin)->sort('dateFacturation', 'asc');
        $query = $q->getQuery();

        return $query->execute();
    }

    public function findByQuery($q)
    {
        $q = "\"".str_replace(" ", "\" \"", $q)."\"";
    	$resultSet = array();
    	$itemResultSet = $this->command([
    			'find' => 'Facture',
    			'filter' => ['$text' => ['$search' => $q]],
    			'projection' => ['score' => [ '$meta' => "textScore" ]],
    			'sort' => ['score' => [ '$meta' => "textScore" ]],
    			'limit' => 100

    	]);
    		foreach ($itemResultSet as $itemResult) {
    			$resultSet[] = array("doc" => $this->uow->getOrCreateDocument('\AppBundle\Document\Facture', $itemResult), "score" => $itemResult['score']);
    		}
    	return $resultSet;
    }

    private function makeBaseFactureRetardDePaiement($nbRelance = null, $societe = null)
    {
      $q = $this->createQueryBuilder();
      $q->field('numeroFacture')->notEqual(null);
      $q->field('cloture')->equals(false);
      $q->field('montantTTC')->gt(0.0);
      if(!is_null($nbRelance)){
        if($nbRelance > 2){
          $q->field('nbRelance')->gte($nbRelance);
        }elseif ($nbRelance == 1 || $nbRelance == 2) {
          $q->field('nbRelance')->equals($nbRelance);
        }elseif ($nbRelance == 0) {
          $q->addOr($q->expr()->field('nbRelance')->equals(null))
            ->addOr($q->expr()->field('nbRelance')->equals(0));
        }
      }
      	if ($societe && !preg_match('/^SOCIETE-[0-9]*$/', $societe)) {
      		$societeRepo = $this->getDocumentManager()->getRepository('AppBundle:Societe');
      		$societeTab = explode(', ', $societe);
      		$societe = $societeRepo->findOneBy(array('identifiant' => $societeTab[count($societeTab)-1]));
        	$q->field('societe')->equals($societe->getId());
      	} elseif ($societe) {
        	$q->field('societe')->equals($societe);
      	}
        $q->sort('dateFacturation', 'desc')->sort('societe', 'asc');
        return $q;
    }

    public function findFactureRetardDePaiement($anneeComptable = null, $nbRelance = null, $societe = null, $secteur = null, $dateMois = null, $commercial_SEINE_ET_MARNE = null){
      $today = new \DateTime();
      // Factures
      $qF = $this->makeBaseFactureRetardDePaiement($nbRelance, $societe);
      $qF->field('dateLimitePaiement')->lte($today);
      if($anneeComptable){
        $mongoStartDate = new MongoDate(strtotime($anneeComptable->format("Y-01-01")));
        $mongoEndDate = new MongoDate(strtotime($anneeComptable->format("Y-12-31")));
        $qF->field('dateFacturation')->gte($mongoStartDate);
        $qF->field('dateFacturation')->lte($mongoEndDate);
      }
      if($dateMois){
        $datePlusOnemonth = clone $dateMois;
        $datePlusOnemonth = $datePlusOnemonth->modify("+1 month -2 hours");
        $qF->field('dateFacturation')->gte($dateMois->modify("+2 hours"));
        $qF->field('dateFacturation')->lte($datePlusOnemonth);
      }
      $resultsFacture = $qF->getQuery()->execute();

      // Devis
      $qD = $this->makeBaseFactureRetardDePaiement($nbRelance, $societe);
      $qD->field('numeroDevis')->notEqual(null);
      if($anneeComptable){
        $mongoStartDate = new MongoDate(strtotime($anneeComptable->format("Y-01-01")));
        $mongoEndDate = new MongoDate(strtotime($anneeComptable->format("Y-12-31")));
        $qD->field('dateFacturation')->gte($mongoStartDate);
        $qD->field('dateFacturation')->lte($mongoEndDate);
      }

      if($dateMois){
        $qD->field('dateFacturation')->gte($dateMois);
        $qD->field('dateFacturation')->lte($datePlusOnemonth);
      }
      $resultsDevis = $qD->getQuery()->execute();

      $commerciauxNom = [];
      $commerciauxNomToExclude = [];

      if ($secteur == EtablissementManager::SECTEUR_PARIS) {
        $commerciauxNomToExclude = [$commercial_SEINE_ET_MARNE];
      } elseif($secteur == EtablissementManager::SECTEUR_SEINE_ET_MARNE) {
        $commerciauxNom = [$commercial_SEINE_ET_MARNE];
      }
      $results = array_merge($resultsFacture->toArray(), $resultsDevis->toArray());
        $retards = array();

        if(count($commerciauxNom)) {
            foreach($results as $retard) {
                if ($retard->getContrat() && !$retard->getContrat()->getCommercial() && !$retard->getCommercial()) {
                    continue;
                }

                if ($retard->getContrat() && $retard->getContrat()->getCommercial() && !in_array($retard->getContrat()->getCommercial()->getNom(), $commerciauxNom)){
                    continue;
                }

                if(!$retard->getContrat() && $retard->getCommercial() && !in_array($retard->getCommercial()->getNom(),$commerciauxNom)){
                    continue;
                }

                $retards[$retard->getDateFacturation()->format("YmdHis").$retard->getId()] = $retard;
            }
        } elseif(count($commerciauxNomToExclude)) {
            foreach($results as $retard) {
                if ($retard->getContrat() && $retard->getContrat()->getCommercial() && in_array($retard->getContrat()->getCommercial()->getNom(), $commerciauxNomToExclude)){
                    continue;
                }

                if(!$retard->getContrat() && $retard->getCommercial() && in_array($retard->getCommercial()->getNom(),$commerciauxNomToExclude)){
                    continue;
                }

                $retards[$retard->getDateFacturation()->format("YmdHis").$retard->getId()] = $retard;
            }
        }

        if (empty($retards)) {
            foreach($results as $retard) {
                $retards[$retard->getDateFacturation()->format("YmdHis").$retard->getId()] = $retard;
            }
        }

        krsort($retards);
        return $retards;
    }

    public function getMontantFacture($societe, $factureIds = null)
    {
        $builder = $this->dm->createAggregationBuilder(\AppBundle\Document\Facture::class);
        $builder
            ->match()
            ->field('societe')->equals($societe->getId())
            ->field('numeroFacture')->notEqual(null);

        if(!is_null($factureIds)) {
            $builder->match()->field('_id')->in($factureIds);
        }

        $builder
            ->group()
            ->field('id')
            ->expression(null)
            ->field('somme_montant_facture')
            ->sum('$montantTTC');

        $resultat = $builder->execute();

        return $resultat->count() ? $resultat->getSingleResult()['somme_montant_facture'] : 0;
    }

    public function findRetardDePaiementBySociete(Societe $societe, $nbJourSeuil = 0){
      return $this->findFactureRetardDePaiement(null, null, $societe, null);
    }

    public function getMontantTropPaye(Societe $societe, $factureIds = null)
    {
        $builder = $this->dm->createAggregationBuilder(\AppBundle\Document\Facture::class);
        $builder
            ->match()
            ->field('societe')->equals($societe->getId())
            ->field('cloture')->equals(true)
            ->field('montantTTC')->gt(0);

        if(!is_null($factureIds)) {
            $builder->match()->field('_id')->in($factureIds);
        }

        $builder
            ->group()
            ->field('id')
            ->expression(null)
            ->field('montant_a_payer')
            ->sum('$montantAPayer');

        $resultat = $builder->execute();

        return $resultat->count() ? $resultat->getSingleResult()['montant_a_payer'] * -1 : 0;
    }


    public function getMontantFacturePayeeAvecTropPercu(Societe $societe, $factureIds = null)
    {
        $builder = $this->dm->createAggregationBuilder(\AppBundle\Document\Facture::class);
        $builder
            ->match()
            ->field('societe')->equals($societe->getId())
            ->field('payeeAvecTropPercu')->equals(true);

        if(!is_null($factureIds)) {
            $builder->match()->field('_id')->in($factureIds);
        }

        $builder
            ->group()
            ->field('id')
            ->expression(null)
            ->field('montant_trop_percu')
            ->sum('$montantTTC');

        $resultat = $builder->execute();

        return $resultat->count() ? $resultat->getSingleResult()['montant_trop_percu'] : 0;
    }

}
