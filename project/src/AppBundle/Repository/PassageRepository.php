<?php

namespace AppBundle\Repository;

use Doctrine\ODM\MongoDB\DocumentRepository;
use AppBundle\Manager\PassageManager;

/**
 * EtablissementRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
use MongoDate as MongoDate;

class PassageRepository extends DocumentRepository {

    public function findAllPlanifieByPeriodeAndIdentifiantTechnicien($startDate, $endDate, $technicien) {
        $mongoStartDate = new MongoDate(strtotime($startDate));
        $mongoEndDate = new MongoDate(strtotime($endDate));
        $query = $this->createQueryBuilder('Passage')
                ->field('dateDebut')->gte($mongoStartDate)
                ->field('dateDebut')->lte($mongoEndDate)
                ->field('statut')->equals(PassageManager::STATUT_PLANIFIE)
                ->field('techniciens')->includesReferenceTo($technicien)
                ->sort('dateDebut', 'asc')
                ->getQuery();
        return $query->execute();
    }

    public function findAllPlanifieByPeriode($startDate, $endDate) {
        $mongoStartDate = new MongoDate(strtotime($startDate));
        $mongoEndDate = new MongoDate(strtotime($endDate));
        $query = $this->createQueryBuilder('Passage')
                ->field('dateDebut')->gte($mongoStartDate)
                ->field('dateDebut')->lte($mongoEndDate)
                ->field('statut')->equals(PassageManager::STATUT_PLANIFIE)
    			->sort('technicien', 'desc')
    			->sort('dateDebut', 'asc')
                ->getQuery();
        return $query->execute();
    }

    public function findHistoriqueByEtablissementAndPrestations($etablissement, $prestations = array(), $limit = 2) {
        $passages = array();

        foreach($prestations as $prestation) {
            $passages = array_merge($passages, $this->findBy(array('etablissement.id' => $etablissement->getId(), 'statut' => PassageManager::STATUT_REALISE, 'prestations.identifiant' => $prestation->getIdentifiant()), array('dateDebut' => 'DESC'), $limit));
        }

        return $passages;
    }

    public function findOneByIdentifiantPassage($identifiantPassage) {

        return $this->findOneBy(
                        array('id' => 'PASSAGE-' . $identifiantPassage));
    }

    public function findOneByIdentifiantEtablissementAndIdentifiantPassage($identifiantEtb, $identifiantPassage) {

        return $this->findOneBy(
                        array('id' => 'PASSAGE-' . $identifiantEtb . '-' . $identifiantPassage));
    }

    public function findByEtablissementAndCreateAt($etablissementIdentifiant, $createAt) {
        return $this->findBy(
                        array('etablissementIdentifiant' => $etablissementIdentifiant, 'createAt' => $createAt));
    }



    public function findPassagesForEtablissement($etablissementIdentifiant) {
    	$query = $this->createQueryBuilder('Passage')
    	->field('etablissementIdentifiant')->equals($etablissementIdentifiant)
    	->sort('datePrevision', 'desc')
    	->getQuery();
    	return$query->execute();
    }

    public function findPassagesForEtablissementSortedByContrat($etablissementIdentifiant) {
    	$query = $this->createQueryBuilder('Passage')
    	->field('etablissementIdentifiant')->equals($etablissementIdentifiant)
    	->sort('contratId', 'desc')->sort('dateCreation', 'desc')
    	->getQuery();
    	return $query->execute();
    }

    public function findTechniciens() {
    	$techniciens = array();
    	$date = new \DateTime();
    	$mongoEndDate = new MongoDate(strtotime($date->format('Y-m-d')));
    	$date->modify('-2 month');
    	$mongoStartDate = new MongoDate(strtotime($date->format('Y-m-d')));
    	$query = $this->createQueryBuilder('Passage')
    	->field('dateFin')->gte($mongoStartDate)
    	->field('dateFin')->lte($mongoEndDate)
    	->group(array('technicien' => 1), array('count' => 0))
    	->reduce('function (obj, prev) { prev.count++; }')
    	->getQuery();
    	$result =  $query->execute();

    	if (count($result)) {
    		foreach ($result as $item) {
    			$techniciens[$item['technicien']] = $item['technicien'];
    		}
    	}

        ksort($techniciens);

    	return $techniciens;
    }

    public function findToPlan() {
        $date= new \DateTime();
        $twoMonth = clone $date;
        $twoMonth->modify("+1 month");
        $mongoStartDate = new MongoDate(strtotime($date->format('Y-m-d')));

        $mongoEndDate = new MongoDate(strtotime($twoMonth->format('Y-m-d')));

        $query = $this->createQueryBuilder('Passage')
                      ->field('statut')->equals(PassageManager::STATUT_A_PLANIFIER)
                // A enlever
                       ->field('datePrevision')->gte($mongoStartDate)

                      ->field('datePrevision')->lte($mongoEndDate)
                      ->sort('datePrevision', 'asc')
                      ->getQuery();

        return $query->execute();
    }

    public function countPassagesByTechnicien($compte) {

        return $this->createQueryBuilder()
             ->field('techniciens')->includesReferenceTo($compte)
             ->getQuery()->execute()->count();
    }

}
